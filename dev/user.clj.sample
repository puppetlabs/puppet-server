;; This file provides a sample `user` namespace that shows some things that
;; can be useful during development; especially if you'd like to develop
;; via the REPL.  To use this, simply make a copy of this file named `user.clj`
;; and modify it to your liking.
(ns user
  (:require [puppetlabs.trapperkeeper.config :as config]))

;; The `user_repl.clj` file has utility functions for starting, stopping, and
;; loading Puppet Server from the REPL.  It will call back into this namespace
;; (a no-arg function called 'puppetserver-conf') to get the config for the
;; server.
;;
;; You could just supply a map literal here, but we generally use `config/load-config`
;; to parse the config from a file.
;;
;; The default implementation of this function just copies the sample config file
;; from dev/puppetserver.conf.sample to ~/.puppetserver and loads it from there.
;; This is suitable for just getting a server up and running as quickly as possible,
;; but is not advised for long-term dev environments.  (The main reason being
;; that the sample config file uses "./target" as a location for a lot of files
;; such as puppet's confdir and codedir, and if you run "lein clean" you'll lose
;; any customizations you've made therein.)
(defn puppetserver-conf
  []
  (let [conf-file ((-> 'user-repl/initialize-default-config-file resolve deref))]
    (config/load-config conf-file))
  ;; a better way to handle config for a long-term dev environment is to comment
  ;; out the two previous lines, create
  ;; your own copy of the dev/puppetserver.conf.sample file somewhere, edit it
  ;; carefully to reflect your needs, and then load it directly, like this:
  ;(config/load-config "/Users/cprice/work/puppetserver/conf/puppetserver.conf")
  )

;; The `go` function in the `user-repl` namespace  will start up an instance of
;; Pupppet Server.  This function will load that namespace, switch to it, and call `go`.
;; Here's an example REPL session:
;;
;;    $ lein repl
;;    user=> (go)
;;       2014-10-31 06:20:40,302 INFO  [p.s.j.jruby-puppet-service] Initializing the JRuby service
;;       ...
;;       2014-10-31 06:24:40,036 INFO  [p.s.m.master-service] Puppet Server has successfully started and is now ready to handle requests
;;       ...
;;    user-repl=> (reset)
;;       2014-10-31 06:26:08,639 INFO  [p.t.internal] Beginning shutdown sequence
;;       2014-10-31 06:26:08,640 INFO  [p.t.s.w.jetty9-service] Shutting down web server(s).
;;       ...
;;       2014-10-31 06:26:08,649 INFO  [p.t.internal] Finished shutdown sequence
;;       :reloading (puppetlabs.puppetserver.ringutils puppetlabs.services.master.master-core
;;       ...
;;       2014-10-31 06:26:10,988 INFO  [p.s.j.jruby-puppet-service] Initializing the JRuby service
;;       2014-10-31 06:26:10,990 INFO  [p.t.s.w.jetty9-service] Initializing web server(s).
;;       ...
;;    user-repl=> (stop)
;;       2014-10-31 06:51:20,037 INFO  [p.t.internal] Beginning shutdown sequence
;;       ...
;;       2014-10-31 06:51:20,052 INFO  [p.t.internal] Finished shutdown sequence
;;    user-repl=>
(defn go
  []
  (load-file "./dev/user_repl.clj")
  (ns user-repl)
  ((-> 'user-repl/go resolve deref)))

;; Leiningen allows users to add plugins at a global level by modifying a
;; file in a user's home directory called '.lein/profiles.clj'. This will allow
;; a developer to use their favorite plugins without adding unneeded
;; dependencies to individual projects.
;;
;; At Puppet we use a couple plugins during development there are incredibly
;; helpful. The first being
;; [Humane Test Output](https://github.com/pjstadig/humane-test-output) which
;; prints out test failures in a much more readable way so a developer can
;; easily determine what the failed output looks like and what it was supposed
;; to look like.
;; The other one is [Pretty](https://github.com/AvisoNovate/pretty) which
;; displays stack traces in a nicely formatted and human readable form.
;;
;; To enable these, paste the following into a file under your home directory
;; called '.lein/profiles.clj'
;;
;; {:user {:dependencies [[io.aviso/pretty "0.1.12" :exclusions [org.clojure/clojure]]
;;                        [pjstadig/humane-test-output "0.6.0"]]
;;         :repl-options {:nrepl-middleware [io.aviso.nrepl/pretty-middleware]}
;;         :injections   [(require 'pjstadig.humane-test-output)
;;                        (pjstadig.humane-test-output/activate!)]}}

